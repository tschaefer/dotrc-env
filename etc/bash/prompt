## have git
if [[ ! -x $(type -p git) ]]; then
    export DISABLE_GIT_PROMPT=1
fi

## git infos
set_git_branch() {

    if [[ ! -e ${ENV_HOME_BASH}/git ]]; then
        return
    fi

    . ${ENV_HOME_BASH}/git

    GIT_PS1_SHOWDIRTYSTATE=1
    GIT_PS1_SHOWSTASHSTATE=1
    GIT_PS1_SHOWUNTRACKEDFILES=1
    GIT_PS1_SHOWUPSTREAM="auto legacy"
    GIT_PS1_SHOWCOLORHINTS=1

    GIT=$(__git_ps1 " (%s)")
}

## prompt symbol
set_prompt_symbol() {
    if [[ $1 -eq 0 ]]; then
        PROMPT_SYMBOL="»"
    else
        PROMPT_SYMBOL="\[${_fg_red}\]»\[${_reset_fg}\]"
    fi
}

## build prompt
set_bash_prompt() {
    set_prompt_symbol $?

    GIT=""
    if [[ -z ${DISABLE_GIT_PROMPT} ]]; then
        set_git_branch
    fi

    echo -ne "\033]0;${USER}@${HOSTNAME%%.*}\007"

    EXEC=$(ps -A -o pid,comm | awk -v ppid=$PPID '$1 == ppid { print $2 }' | \
    xargs basename)
    EXEC=":\[${_fg_yellow}\]${EXEC}\[${_reset_fg}\]"

    if [[ -n ${VIRTUAL_ENV} ]]; then
        EXEC="${EXEC}@\[${_fg_red}\]venv\[${_reset_fg}\]"
    fi

    if [[ ${EUID} == 0 ]] ; then
       PS1="\[${_fg_red}\]\u\[${_reset_fg}\]@\[${_fg_blue}\]\h\[${_reset_fg}\]${EXEC}${GIT} \[${_fg_cyan}\]\w\[${_reset_fg}\]
 ${PROMPT_SYMBOL} "
        PS2="root %> "
    else
       PS1="\[${_fg_white}\]\u\[${_reset_fg}\]@\[${_fg_blue}\]\h\[${_reset_fg}\]${EXEC}${GIT} \[${_fg_cyan}\]\w\[${_reset_fg}\]
 ${PROMPT_SYMBOL} "
        PS2="%> "
    fi

}

## display prompt
PROMPT_COMMAND=set_bash_prompt

# vim:ft=sh
