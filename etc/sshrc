case $- in
  *i*) ;;
    *) return;;
esac

case ${OSTYPE} in
    darwin*)
        ENV_OS=Darwin
        ENV_USER=${SUDO_USER:-${USER}}
        ;;
    linux*)
        ENV_OS=Linux
        # shellcheck disable=SC2046
        ENV_USER=$(stat -c %U $(readlink -f /proc/self/fd/0))
        if [[ -r /etc/os-release ]]; then
            ENV_LINUX_RELEASE=$(awk -F '=' '/^ID=/ { print $2 }' /etc/os-release)
        fi
        ;;
    solaris*)
        ENV_OS=Solaris
        ENV_USER=${SUDO_USER:-${USER}}
        ;;
    freebsd*)
        ENV_OS=FreeBSD
        ENV_USER=${SUDO_USER:-${USER}}
        ;;
    *)
        ENV_OS=${OSTYPE}
        ENV_USER=${SUDO_USER:-${USER}}
        ;;
esac

ENV_HOME=$(eval echo ~${ENV_USER})
if [[ -e ${ENV_HOME}/.bashrc ]]; then
    source "${ENV_HOME}"/.bashrc
    unset ENV_HOME
    unset ENV_OS
    unset ENV_USER
    unset ENV_LINUX_RELEASE

    return
fi

ENV_HOME=${SSHHOME}/.sshrc.d
if [[ ${EUID} -eq 0 ]] && [[ -z $SSHHOME ]]; then
    SSHHOME=$(dirname "${SUDO_COMMAND##* }")
    export SSHHOME
    ENV_HOME=${SSHHOME}/.sshrc.d
fi
export ENV_OS ENV_USER ENV_HOME ENV_LINUX_RELEASE
export TERM=xterm-256color

alias root="sudo bash --rcfile ${SSHHOME}/.sshrc"

USER_HOME=$(grep "^${SUDO_USER:-$ENV_USER}:" /etc/passwd | cut -d: -f 6)
if [[ -r ${USER_HOME}/.sshrc.local ]]; then
    source "${USER_HOME}"/.sshrc.local
fi

function _env_init_path {
    local path

    PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin
    for path in ${ENV_HOME}/bin ${USER_HOME}/.bin ${USER_HOME}/.local/bin; do
        if [[ -d ${path} ]]; then
            PATH=${PATH}:${path}
        fi
    done
    export PATH
}

function _env_init_manpath {
    local path

    if [[ ! $(type -P -- manpath) ]]; then
        return
    fi

    unset MANPATH

    MANPATH=$(manpath)
    for path in ${ENV_HOME}/man ${USER_HOME}/.local/man ${USER_HOME}/.local/share/man; do
        if [[ -d ${path} ]]; then
            MANPATH=${MANPATH}:${path}
        fi
    done
    export MANPATH
}
_env_init_path
unset -f _env_init_path
_env_init_manpath
unset -f _env_init_manpath
unset USER_HOME

if [[ -e /etc/bash_completion ]]; then
    source /etc/bash_completion
fi

ENV_TMP=$(mktemp --directory --tmpdir="${XDG_RUNTIME_DIR:-"/tmp"}")
trap 'rm -rf ${ENV_TMP}' EXIT
export ENV_TMP

if [[ -S ${XDG_RUNTIME_DIR}/gnupg/S.gpg-agent.ssh ]]; then
    export SSH_AUTH_SOCK=${XDG_RUNTIME_DIR}/gnupg/S.gpg-agent.ssh
elif [[ -S ${XDG_RUNTIME_DIR}/ssh-agent.socket ]]; then
    export SSH_AUTH_SOCK=${XDG_RUNTIME_DIR}/ssh-agent.socket
fi

GPG_TTY=$(tty)
export GPG_TTY

export HISTCONTROL=ignoreboth
export HISTSIZE=32768
export HISTFILESIZE=${HISTSIZE}
export HISTTIMEFORMAT="%Y%m%d %T "

if [[ -z ${LANG} ]]; then
    export LANG=C
fi
export TZ="Europe/Berlin"

if [[ $(type -t -- less) ]]; then
    export PAGER=less
    export LESS="-F -R -M --shift 5 -x 4"
    export LESSCOLOR="always"
    export LESSQUIET=1
    export LESSHISTFILE=-

    if [[ $(type -P -- lesspipe) ]]; then
        eval "$(lesspipe)"
    fi
else
    export PAGER=more
fi

if [[ $(type -P -- manpager) ]]; then
    export MANPAGER="manpager"
fi

if [[ $(type -P -- nano) ]]; then
    export EDITOR="nano"
    export VISUAL="nano"

    if [[ -e ${ENV_HOME}/nanorc ]]; then
        alias nano="nano --rcfile ${ENV_HOME}/nanorc"
    fi
fi

if [[ $(type -P -- batcat || type -P -- bat) ]]; then
    exec=$(type -P -- batcat || type -P -- bat)
    export BAT_THEME=${BAT_THEME:-"Solarized (dark)"}

    alias b="${exec}"
    alias bp="${exec} --plain"
    alias bl="${exec} --language"
    alias blp="${exec} --plain --language"

    alias cat="${exec} --pager=never --plain"

    unset exec
fi

if [[ $(type -P -- fzf) ]]; then
    if fzf --bash >/dev/null 2>&1; then
        eval "$(fzf --bash)"
    elif [[ -r "/usr/share/doc/fzf/examples/key-bindings.bash" ]]; then
        source "/usr/share/doc/fzf/examples/key-bindings.bash"
    fi
fi

if [[ ${ENV_OS} == "Linux" ]]; then
    alias ipas='ip --color addr show'
    alias ipr='ip --color route show'
    alias ipl='ip --color link show'
fi

if [[ $(type -P -- screen) ]] && [[ -e ${ENV_HOME}/screenrc ]]; then
    alias screen="screen -c ${ENV_HOME}/screenrc"
fi

shopt -s histappend
shopt -s checkwinsize
shopt -s cdspell
shopt -s checkhash
shopt -s cmdhist
shopt -s extglob
shopt -s histreedit
shopt -s histverify
shopt -s hostcomplete
shopt -s no_empty_cmd_completion
set -o emacs

case ${TERM} in
    vt100)
        [[ $(type -P -- resize) ]] && resize
        ;;
    xterm*)
        [[ ${EUID} -ne 0 ]] && echo -ne "\033]0;${USER}@${HOSTNAME%%.*}\007"
        ;;
    *)
        ;;
esac

if [[ $(type -P -- dircolors) ]]; then
    if [[ -r ${ENV_HOME}/dircolors ]]; then
        eval "$(dircolors -b "${ENV_HOME}"/dircolors)"
    else
        eval "$(dircolors -b)"
    fi

    alias ls="ls --color=auto"
    alias grep="grep --color=auto"
    alias fgrep="fgrep --color=auto"
    alias egrep="egrep --color=auto"
fi

_text_bold="\033[1m"
_text_dim="\033[2m"
_text_underline="\033[4m"
_text_reverse="\033[7m"

_reset_all="\033[0m"
_reset_fg="\033[39m"
_reset_bg="\033[49m"
_reset_bold="\033[21m"
_reset_dim="\033[22m"
_reset_underline="\033[24m"
_reset_inverse="\033[27m"

_fg_grey_darker="\033[30m"
_fg_red="\033[31m"
_fg_green="\033[32m"
_fg_yellow="\033[33m"
_fg_blue="\033[34m"
_fg_magenta="\033[35m"
_fg_cyan="\033[36m"
_fg_white="\033[37m"
_fg_black="\033[90m"
_fg_orange="\033[91m"
_fg_grey_dark="\033[92m"
_fg_grey_mid="\033[93m"
_fg_grey_light="\033[94m"
_fg_violet="\033[95m"
_fg_grey_lighter="\033[96m"
_fg_white="\033[97m"
_fg_grey="\033[39m"

_bg_grey_darker="\033[40m"
_bg_red="\033[41m"
_bg_green="\033[42m"
_bg_yellow="\033[43m"
_bg_blue="\033[44m"
_bg_magenta="\033[45m"
_bg_cyan="\033[46m"
_bg_white="\033[47m"
_bg_black="\033[100m"
_bg_orange="\033[101m"
_bg_grey_dark="\033[102m"
_bg_grey_mid="\033[103m"
_bg_grey_light="\033[104m"
_bg_violet="\033[105m"
_bg_grey_lighter="\033[106m"
_bg_white="\033[107m"
_bg_grey="\033[49m"

function set_bash_prompt_host {
    local cmd=$1
    local host
    host="${_fg_blue}[\h:${cmd}]${_reset_fg}"

    if [[ -n ${ENV_KEEP_HOSTNAME} ]]; then
        echo ${host}
        return
    fi

    if [[ ! $(type -P -- systemd-detect-virt) ]]; then
        echo ${host}
        return
    fi

    if systemd-detect-virt --quiet --container && \
        [[ -n ${ENV_LINUX_RELEASE} ]]; then
        host="${_fg_blue}[${ENV_LINUX_RELEASE}:${cmd}]${_reset_fg}"
    fi

    echo ${host}
}

function set_bash_prompt {
    if [[ $? -eq 0 ]]; then
        local symbol=">>"
    else
        local symbol="${_fg_red}>>${_reset_fg}"
    fi

    local cmd
    local host
    local dir

    cmd=$(ps -A -o pid,comm | awk -v ppid=$PPID '$1 == ppid { print $2 }')
    cmd=$(basename "${cmd:-$SHELL}")
    if [[ ${EUID} -eq 0 ]]; then
        cmd="${_fg_red}${cmd}${_reset_fg}"
    fi
    host=$(set_bash_prompt_host ${cmd})
    dir="${_fg_grey_dark}[\w]${_reset_fg}"

    local git
    if [[ $(declare -F __git_ps1) ]]; then
        GIT_PS1_SHOWDIRTYSTATE=1
        GIT_PS1_SHOWSTASHSTATE=1
        GIT_PS1_SHOWUNTRACKEDFILES=1
        GIT_PS1_SHOWUPSTREAM="auto legacy"
        GIT_PS1_SHOWCOLORHINTS=1

        git=$(__git_ps1 " [%s]")
        git="${_fg_yellow}${git}${_reset_fg}"
    fi

    PROMPT_DIRTRIM=3

    PS1="${host} ${dir}${git}\n ${symbol} "
    PS2=" %> "
}
PROMPT_COMMAND=set_bash_prompt

# vim:ft=sh
