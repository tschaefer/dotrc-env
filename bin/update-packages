#!/bin/bash

readonly ME=${0##*/}
readonly LOGDIR="/var/log/update-packages"
readonly LOGFILE="${LOGDIR}/update-packages_$(date +%y%m%d%H%M%S).log"

usage() {
cat <<EOF
Usage:
    $ME [-l SYSLOG | FILE] [-a] | -epsy

    $ME -h

Options:
    -h:     shows this message (help)
    -a:     update all (perl, python, system) packages
    -e:     update dotrc environment
    -p:     update perl packages
    -s:     update system packages
    -v:     update vim plugins
    -y:     update python packages
    -l:     log to file or syslog (journald)

EOF
}

update_env() {
    echo -e "\033[33mStarting dotrc envrionment update ...\033[39m"

    if [[ -d ${HOME}/.env ]]; then
        cd ${HOME}/.env ; git pull ; cd - >/dev/null
    fi

    echo -e "\033[33mdone.\033[39m"
}

update_python() {
    echo -e "\033[33mStarting python packages update ...\033[39m"

    if [[ -x $(type -P pip2) ]]; then
        version=$(python2 --version 2>&1)
        echo -e "\033[33m${version}\033[39m"

        sudo python2 -m pip install --upgrade pip

        pip2 install --user --upgrade $(pip2 list --user --format=columns | \
            awk 'FNR > 2 {print $1 }')
    fi

    if [[ -x $(type -P pip3) ]]; then
        version=$(python3 --version)
        echo -e "\033[33m${version}\033[39m"

        sudo python3 -m pip install --upgrade pip

        pip3 install --user --upgrade $(pip3 list --user --format=columns | \
            awk 'FNR > 3 {print $1 }')
    fi

    echo -e "\033[33mdone.\033[39m"
}

update_perl() {
    echo -e "\033[33mStarting perl packages update ...\033[39m"

    if [[ -x $(type -P perlbrew) ]]; then
        for version in $(perlbrew list | tr -d ' *'); do
            if [[ $version =~ @ ]]; then
                continue
            fi

            echo -e "\033[33m${version}\033[39m"

            ${PERLBREW_ROOT}/perls/${version}/bin/cpan-outdated | \
                ${PERLBREW_ROOT}/perls/${version}/bin/perl \
                ${PERLBREW_ROOT}/bin/cpanm
        done
    fi

    echo -e "\033[33mdone.\033[39m"
}

update_system() {
    echo -e "\033[33mStarting system packages update ...\033[39m"

    local distro

    distro=$(awk -F '=' '/^ID/ { print $2 }' /etc/os-release)

    case $distro in
        debian)
            sudo apt-get update ; sudo apt-get -y dist-upgrade ; \
                sudo apt-get -y autoremove --purge
                sudo apt-get clean ; sudo apt-get autoclean
            ;;
        gentoo)
            sudo emerge --sync ; \
                sudo emerge --verbose --update --newuse --deep @world
            ;;
        *)
            return
            ;;
    esac

    echo -e "\033[33mdone.\033[39m"
}

update_vim() {
    echo -e "\033[33mStarting vim plugins update ...\033[39m"

    if [[ -x $(type -P vim) ]]; then
        vim +PluginUpdate +qall
    fi

    echo -e "\033[33mdone.\033[39m"
}


get_opts() {
    while getopts ":hael:psvy" opt; do
        case $opt in
            a)
                opt_a=1
                ;;
            e)
                opt_e=1
                ;;
            p)
                opt_p=1
                ;;
            s)
                opt_s=1
                ;;
            v)
                opt_v=1
                ;;
            y)
                opt_y=1
                ;;
            l)
                opt_l="$OPTARG"
                ;;
            h)
                opt_h=1
                ;;
            *)
                if [[ "$OPTARG" == "l" ]]; then
                    echo "missing argument" >&2
                else
                    echo "unknown option -$OPTARG" >&2
                fi
                usage >&2
                exit 2
                ;;
        esac
    done

    local opt_count

    opt_count=$(( OPTIND - 1 ))

    if [ -n "$opt_h" ] && \
        [[ $opt_count -gt 1 ]]; then
        usage >&2
        exit 2
    fi

    if [[ -n "$opt_l" ]]; then
        opt_count=$(( opt_count - 2 ))
    fi


    if [[ $opt_count -eq 0 ]]; then
        opt_a=1
    fi

    if [[ -n "$opt_a" ]] || [[ -n "$opt_h" ]] || [[ -n "$opt_e" ]] ||\
        [[ -n "$opt_v" ]] && [[ $opt_count -gt 1 ]]; then
        echo "too much options" <&2
        usage >&2
        exit 2
    fi

    if [[ -n "$opt_l" ]] && [[ ! "$opt_l" =~ (FILE|SYSLOG) ]]; then
        echo "bad argument" >&2
        usage >&2
        exit 2
    fi
}

log_to_target() {
    if [[ "$opt_l" == "SYSLOG" ]]; then
        tee >(logger -p INFO -t update-packages)
    elif [[ "$opt_l" == "FILE" ]]; then
        tee -a $LOGFILE
    fi

    tee /dev/null
}

main() {
    get_opts ${1+"$@"}

    if [[ -n "$opt_h" ]]; then
        usage
        exit 0
    fi

    if [[ -n "$opt_e" ]]; then
        update_env | log_to_target
    fi

    if [[ -n "$opt_p" ]]; then
        update_perl | log_to_target
    fi

    if [[ -n "$opt_s" ]]; then
        update_system | log_to_target
    fi

    if [[ -n "$opt_v" ]]; then
        update_vim | log_to_target
    fi

    if [[ -n "$opt_y" ]]; then
        update_python | log_to_target
    fi

    if [[ -n "$opt_a" ]]; then
        update_system | log_to_target
        update_perl   | log_to_target
        update_python | log_to_target
    fi

    exit 0
}

main ${1+"$@"}
