#!/bin/bash

readonly ME=${0##*/}
readonly LOGDIR="/var/log/update-packages"
DATE=$(date +%y%m%d%H%M%S)
readonly LOGFILE="${LOGDIR}/update-packages_${DATE}.log"

usage() {
cat <<EOF
Usage:
    $ME [-l JOURNAL | FILE] [-a] | -eprstvy | -j

    $ME -h

Options:
    -h:     shows this message (help)
    -a:     update all (perl, python, ruby, rust, system) packages
    -e:     update dotrc environment
    -o:     update oh-my-bash
    -p:     update perl packages
    -r:     update ruby packages
    -s:     update system packages
    -t:     update rust
    -v:     update vim plugins
    -y:     update python packages
    -l:     log to file or journald
    -j:     show current (since today) log

EOF
}

update_env() {
    echo -e "\033[33mStarting dotrc envrionment update ...\033[39m 🐘"

    if [[ -d ${HOME}/.env ]]; then
        cd ${HOME}/.env || false && git pull ; cd - >/dev/null 2>&1 || false
    fi

    echo -e "\033[33mdone.\033[39m"
}

update_python() {
    echo -e "\033[33mStarting python update ...\033[39m 🐍"

    if type -P -- "pip2" &> /dev/null; then
        version=$(python2 --version)
        echo -e "\033[32m${version}\033[39m"

        sudo python2 -m pip install --upgrade pip

        pip2 install --user --upgrade "$(pip2 list --user --format=columns | \
            awk 'FNR > 2 {print $1 }')"
    fi

    if type -P -- "pip3" &> /dev/null; then
        version=$(python3 --version)
        echo -e "\033[32m${version}\033[39m"

        sudo python3 -m pip install --upgrade pip

        pip3 install --user --upgrade "$(pip3 list --user --format=columns | \
            awk 'FNR > 3 {print $1 }')"
    fi

    if type -P -- "pipx" &> /dev/null; then
        version=$(pipx --version)
        echo -e "\033[32mpipx ${version}\033[39m"

        pipx upgrade-all
    fi

    echo -e "\033[33mdone.\033[39m"
}

update_perl() {
    echo -e "\033[33mStarting perl update ...\033[39m 🐪"

    if type -P -- "perlbrew" &> /dev/null; then
        perlbrew self-upgrade

        for version in $(perlbrew list | tr -d ' *'); do
            if [[ $version =~ @ ]]; then
                continue
            fi

            echo -e "\033[32m${version}\033[39m"

            ${PERLBREW_ROOT}/perls/${version}/bin/cpan-outdated | \
                ${PERLBREW_ROOT}/perls/${version}/bin/perl \
                ${PERLBREW_ROOT}/bin/cpanm
        done
    fi

    echo -e "\033[33mdone.\033[39m"
}

_update_rbenv() {
    version=$(rbenv --version)
    echo -e "\033[32m${version}\033[39m"

    for dir in ${HOME}/.rbenv ${HOME}/.rbenv/plugins/ruby-build; do
        [[ ! -d $dir ]] && continue

        cd $dir >/dev/null 2>&1 || return
        git pull
        cd - >/dev/null 2>&1 || return
    done
}

update_ruby() {
    echo -e "\033[33mStarting ruby update ...\033[39m 🦊"

    if type -P -- "rbenv" &> /dev/null; then
        _update_rbenv
        eval "$(rbenv init - bash)"
        for version in $(rbenv versions --bare); do
            echo -e "\033[32m${version}\033[39m"

            rbenv shell $version
            gem update --verbose --system
        done
    fi

    echo -e "\033[33mdone.\033[39m"
}


update_rust() {
    echo -e "\033[33mStarting rust update ...\033[39m 🦀"

    if type -P -- "rustup" &> /dev/null; then
        version=$(rustc --version | awk '{ print $1 " " $2 }')
        echo -e "\033[32m${version}\033[39m"

        rustup update
    fi

    echo -e "\033[33mdone.\033[39m"
}

update_system() {
    echo -e "\033[33mStarting system update ...\033[39m 🐧"

    pretty_name=$(awk -F '"' '/^PRETTY_NAME=/ { print $2 }' /etc/os-release)
    distro=$(awk -F '=' '/^ID=/ { print $2 }' /etc/os-release)

    echo -e "\033[32m${pretty_name}\033[39m"

    case $distro in
        debian|raspbian|kali)
            sudo apt-get update
            sudo apt-get --option Dpkg::Options::="--force-confold" --yes dist-upgrade
            sudo apt-get --yes autoremove --purge
            sudo apt-get clean
            sudo apt-get autoclean
            ;;
        gentoo)
            sudo emerge --sync
            sudo emerge --verbose --update --newuse --deep @world
            ;;
        freebsd)
            sudo freebsd-update fetch install
            sudo pkg update
            sudo pkg upgrade --yes
            ;;
        *)
            ;;
    esac

    echo -e "\033[33mdone.\033[39m"
}

update_vim() {
    echo -e "\033[33mStarting vim plugins update ...\033[39m 🦅"

    if type -P -- "vim" &> /dev/null; then
        version=$(vim --version | awk 'NR==1 { print $5 }')
        echo -e "\033[32mvim ${version}\033[39m"

        vim +PluginUpdate +qall 2>/dev/null
    fi

    echo -e "\033[33mdone.\033[39m"
}

update_oh_my_bash() {
    echo -e "\033[33mStarting oh-my-bash update ...\033[39m 🐏"

    OSH=${OSH:-$HOME/.oh-my-bash}
    OSH_UPGRADE=${OSH}/tools/upgrade.sh

    if test -f $OSH_UPGRADE; then
        source $OSH_UPGRADE
    fi

    echo -e "\033[33mdone.\033[39m"
}

show_log() {
    local logfile
    logfile=$(sudo find $LOGDIR -type f -mtime -1 -print 2>/dev/null | sort | tail -n 1)

    if [[ -n $logfile ]]; then
        sudo cat $logfile
    else
        journalctl --all --since today --identifier update-packages \
            --output cat --all
    fi
}

get_opts() {
    local opt_count=0
    while getopts ":hael:oprstvyj" opt; do
        case $opt in
            a)
                opt_a=1
                ;;
            e)
                opt_e=1
                ;;
            p)
                opt_p=1
                ;;
            r)
                opt_r=1
                ;;
            o)
                opt_o=1
                ;;
            s)
                opt_s=1
                ;;
            t)
                opt_t=1
                ;;
            v)
                opt_v=1
                ;;
            y)
                opt_y=1
                ;;
            l)
                opt_l="$OPTARG"
                ;;
            j)
                opt_j=1
                ;;
            h)
                opt_h=1
                ;;
            *)
                if [[ "$OPTARG" == "l" ]]; then
                    echo "missing argument" >&2
                else
                    echo "unknown option -$OPTARG" >&2
                fi
                usage >&2
                exit 2
                ;;
        esac
        (( opt_count++ ))
    done

    if [[ -n "$opt_h" ]] || [[ -n "$opt_j" ]] && \
        [[ $opt_count -gt 1 ]]; then
        usage >&2
        exit 2
    fi

    if [[ -n "$opt_l" ]]; then
        opt_count=$(( opt_count - 1 ))
    fi


    if [[ $opt_count -eq 0 ]]; then
        opt_a=1
    fi

    if [[ -n "$opt_a" ]] || [[ -n "$opt_h" ]] || [[ -n "$opt_e" ]] ||\
        [[ -n "$opt_v" ]] && [[ $opt_count -gt 1 ]]; then
        echo "too much options" <&2
        usage >&2
        exit 2
    fi

    if [[ -n "$opt_l" ]] && [[ ! "$opt_l" =~ (FILE|JOURNAL) ]]; then
        echo "bad argument" >&2
        usage >&2
        exit 2
    fi
}

log_to_target() {
    if [[ "$opt_l" == "JOURNAL" ]]; then
        tee >(logger -p INFO -t update-packages)
    elif [[ "$opt_l" == "FILE" ]]; then
        sudo tee -a $LOGFILE
    fi

    tee /dev/null
}

main() {
    get_opts ${1+"$@"}

    if [[ -n "$opt_h" ]]; then
        usage
        exit 0
    fi

    if [[ -n "$opt_j" ]]; then
        show_log
    fi

    if [[ -n "$opt_l" ]] && [[ "$opt_l" == "FILE" ]]; then
        if [[ ! -d $LOGDIR ]]; then
            sudo mkdir -p $LOGDIR
        fi
    fi

    if [[ -n "$opt_e" ]]; then
        update_env 2>&1 | log_to_target
    fi

    if [[ -n "$opt_p" ]]; then
        update_perl 2>&1 | log_to_target
    fi

    if [[ -n "$opt_o" ]]; then
        update_oh_my_bash 2>&1 | log_to_target
    fi

    if [[ -n "$opt_r" ]]; then
        update_ruby 2>&1 | log_to_target
    fi

    if [[ -n "$opt_s" ]]; then
        update_system 2>&1 | log_to_target
    fi

    if [[ -n "$opt_t" ]]; then
        update_rust 2>&1 | log_to_target
    fi

    if [[ -n "$opt_v" ]]; then
        update_vim 2>&1 | log_to_target
    fi

    if [[ -n "$opt_y" ]]; then
        update_python 2>&1 | log_to_target
    fi

    if [[ -n "$opt_a" ]]; then
        update_system     2>&1 | log_to_target
        update_oh_my_bash 2>&1 | log_to_target
        update_perl       2>&1 | log_to_target
        update_python     2>&1 | log_to_target
        update_ruby       2>&1 | log_to_target
        update_rust       2>&1 | log_to_target
    fi

    exit 0
}

main ${1+"$@"}
