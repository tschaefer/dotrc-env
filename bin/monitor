#!/usr/bin/env perl

use strict;
use warnings;

use Carp;
use Getopt::Long;
use IPC::Run;
use Pod::Usage;
use utf8;

my $cfgfile;
my %cfg;

sub is_on {
    my ( @cmd, $out, $is_on );

    @cmd = qw(xrandr --listactivemonitors);
    IPC::Run::run( \@cmd, ">", \$out, '2>/dev/null' );

    $is_on = ( $out && $out =~ /$cfg{ext}$/m ) ? 0 : 1;

    return $is_on;
}

sub is_off {
    my ( @cmd, $out, $is_off );

    @cmd = qw(xrandr --listactivemonitors);
    IPC::Run::run( \@cmd, ">", \$out, '2>/dev/null' );

    $is_off = ( $out && $out !~ /$cfg{ext}$/m ) ? 0 : 1;

    return $is_off;
}

sub turn_on {
    my ( @cmd, $out );

    if ( $cfg{'order'} eq 'int-ext' ) {
        @cmd = (
            'xrandr', '--output', $cfg{int}, '--primary',
            '--auto', '--output', $cfg{ext}, '--' . $cfg{pos},
            $cfg{int}, '--' . $cfg{mode},
        );
    }
    elsif ( $cfg{'order'} eq 'ext-int' ) {
        @cmd = (
            'xrandr', '--output',  $cfg{ext}, '--primary',
            '--' . $cfg{mode}, '--output', $cfg{ext},
            '--' . $cfg{pos}, $cfg{int}, '--auto',
        );
    }
    IPC::Run::run( \@cmd, '>/dev/null', '2>&1' );

    return is_on();
}

sub turn_off {
    my ( @cmd, $out );

    @cmd = ( 'xrandr', '--output', $cfg{ext}, '--off' );
    IPC::Run::run( \@cmd, '>/dev/null', '2>&1' );

    return is_off();
}

sub print_usage {
    pod2usage( -exitval => 255, -verbose => 0 );
    return;
}

sub print_help {
    pod2usage( -exitval => 0, -verbose => 1 );
    return;
}

sub print_man {
    pod2usage( -exitval => 0, -verbose => 2 );
    return;
}

sub parse_config {
    croak("$!: $cfgfile") if ( !-e $cfgfile );

    open my $fh, "<", $cfgfile or croak("$!: $cfgfile");
    chomp( my @raw = <$fh> );
    close $fh or croak("$!: $cfgfile");

    foreach ( grep { /^[a-z_]+\s*=\s*.+/ } @raw ) {
        my ( $key, $value ) = split /\s*=\s*/;
        $cfg{$key} = $value;
    }

    foreach (qw{ int ext order pos mode }) {
        croak("Invalid configuration: $cfgfile") if ( !$cfg{$_} );
    }

    $cfg{mode} = "mode $cfg{mode}" if ( $cfg{mode} ne 'auto' );

    return;
}

sub run {

    $cfgfile = "$ENV{HOME}/.config/monitor/monitorrc";

    GetOptions( "config|c=s" => \$cfgfile, )
      or print_usage();

    parse_config($cfgfile);

    my %ACTIONS = (
        on     => \&turn_on,
        off    => \&turn_off,
        is_on  => \&is_on,
        is_off => \&is_off,
        help   => \&print_help,
        man    => \&print_man,
    );
    my $action = $ARGV[0];

    return print_usage() if ( !$action );

    $action =~ s/-/_/g;
    return print_usage() if ( !$ACTIONS{$action} );

    my $sub = $ACTIONS{$action};

    return &$sub();
}

exit run();

__END__

=encoding utf8

=head1 NAME

monitor - Quickly use external monitor.

=head1 SYNOPSIS

monitor [--config FILE] on | off | is-on | is-off

monitor help | man

=head1 OPTIONS

=over 8

=item B<--config|-c> FILE

Path to configuration file.

=item B<on>

Turn on external monitor.

=item B<off>

Turn off external monitor.

=item B<is-on>

Is external monitor turned on.

=item B<is-off>

Is external monitor turned off.

=back

=head1 DESCRIPTION

monitor is a tool to quickly configure and turn on, off an external monitor
(LCD, beamer, etc.).

The default configuration file is placed in ~/.config/monitor/monitorrc.
The configuration must provide the name of the internal, external monitor, the
relative position, the mode of the external monitor and the order (int-ext,
ext-int).

For further infos see B<man xrandr>.

=head1 EXAMPLE

    ### monitor configuration

    # internal monitor
    int = eDP1

    # external monitor
    ext = HDMI1

    # monitor order
    order = int-ext

    # position external monitor
    pos = left-of

    # mode external monitor
    mode = auto

=cut
