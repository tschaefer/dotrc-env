#!/usr/bin/env perl

use strict;
use warnings;

use Furl;
use Getopt::Long;
use JSON::XS;
use Pod::Usage;
use POSIX qw(strftime);
use Readonly;
use Term::ANSIColor;
use utf8;

binmode STDOUT, ":encoding(UTF-8)";

Readonly my $API_URL =>
  'https://api.openweathermap.org/data/2.5/%s?q=%s&units=metric&APPID=%s';
Readonly my $RC_FILE => $ENV{'HOME'} . '/.weatherrc';

no warnings 'uninitialized';

sub print_error {
    my $msg = shift;

    print {*STDERR} $msg;

    exit 1;
}

sub get_weather_data {
    my ( $opts, $key ) = @_;

    my $url = sprintf $API_URL, 'weather', $opts->{'location'}, $key;

    my $furl = Furl->new();
    my $res  = $furl->get($url);

    print_error( $res->status_line . "\n" ) if ( !$res->is_success );

    my $json = $res->decoded_content;
    my $data = decode_json($json);

    return $data;
}

sub get_api_key {
    my $key = 0;

    open my $fh, "<", $RC_FILE or print_error( "$!: " . $RC_FILE . "\n" );
    chomp( $key = <$fh> );
    close $fh or print_error( "$!: " . $RC_FILE . "\n" );

    return $key;
}

sub print_conditions {
    my $info = shift;

    printf "%-12s %s, %s\n", 'Location:', $info->{'name'},
      $info->{'sys'}->{'country'};

    printf "%-12s %s °\n", 'Latitude:', $info->{'coord'}->{'lat'};

    printf "%-12s %s °\n", 'Longitude', $info->{'coord'}->{'lon'};

    printf "%-12s %s\n", 'Sunrise',
      strftime( "%H:%M:%S", localtime $info->{'sys'}->{'sunrise'} );

    printf "%-12s %s\n", 'Sunset',
      strftime( "%H:%M:%S", localtime $info->{'sys'}->{'sunset'} );

    printf "%-12s %s\n", 'Condition:',
      ucfirst $info->{'weather'}->[0]->{'description'};

    printf "%-12s %s °C\n", 'Temperature:', $info->{'main'}->{'temp'};

    printf "%-12s %s %%\n", 'Humidity:', $info->{'main'}->{'humidity'};

    printf "%-12s %s km/h\n", 'Wind:', $info->{'wind'}->{'speed'};

    printf "%-12s %s km\n", 'Visibility:', $info->{'visibility'} / 1000;

    printf "%-12s %s hPa\n", 'Pressure:', $info->{'main'}->{'pressure'};

    exit 0;
}

sub print_weather {
    my $opts = shift;

    my $key  = get_api_key();
    my $data = get_weather_data( $opts, $key );

    print_conditions($data);

    return;
}

sub print_usage {
    pod2usage( -exitval => 255, -verbose => 0 );
    return;
}

sub print_help {
    pod2usage(
        -exitval  => 0,
        -verbose  => 99,
        -sections => 'SYNOPSIS|OPTIONS|PARAMETERS',
    );
    return;
}

sub print_man {
    pod2usage( -exitval => 0, -verbose => 2 );
    return;
}

sub get_location {
    my $furl = Furl->new();
    my $url  = 'https://ipinfo.io/geo';
    my $res  = $furl->get($url);

    print_error( $res->status_line . "\n" ) if ( !$res->is_success );

    my $json = $res->decoded_content;
    my $data = decode_json($json);

    my $location = sprintf "%s,%s", $data->{'city'}, $data->{'country'};

    return $location;
}

sub run {
    my $opts;
    GetOptions(
        "help|h" => \$opts->{'help'},
        "man|m"  => \$opts->{'man'},
    ) or print_usage();

    my $count = 0;
    foreach ( values %{$opts} ) {
        $count += 1 if ($_);
    }

    print_usage() if ( ( $opts->{'help'} || $opts->{'man'} ) && $count > 1 );
    print_man()   if ( $opts->{'man'} );
    print_help()  if ( $opts->{'help'} );

    $opts->{'location'} = $ARGV[0] || get_location();

    print_weather($opts);

    return 0;
}

exit run();

__END__

=encoding utf8

=head1 NAME

weather - Show your weather.

=head1 SYNOPSIS

weather [LOCATION]

weather --help | --man

=head1 OPTIONS

=over 8

None.

=back

=head1 PARAMETERS

=over 8

=item B<LOCATION>

City name (comma separated country) [default current location].

=back

=head1 DESCRIPTION

weather is a tool to get current conditions for a given location.

An OpenWeatherMap API key L<http://openweathermap.org> is needed
and must be provided in the user home, ~/.weatherrc.

=cut
