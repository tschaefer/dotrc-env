#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;
use JSON;
use LWP::UserAgent;
use Pod::Usage;
use utf8;

## no critic (ValuesAndExpressions::ProhibitConstantPragma)
use constant API_URL => 'http://api.wunderground.com/api/%s/%s/q/%s.json';
use constant RC_FILE => $ENV{'HOME'} . '/.weatherrc';
## use critic

sub print_error {
    my $msg = shift;

    print {*STDERR} $msg;

    exit 1;
}

sub get_weather_data {
    my ( $opts, $key ) = @_;

    my $feature = $opts->{'forecast'} ? 'forecast10day' : 'conditions';
    my $url = sprintf API_URL, $key, $feature, $opts->{'location'};

    my $ua  = LWP::UserAgent->new();
    my $res = $ua->get($url);

    print_error( $res->status_line . "\n" ) if ( !$res->is_success );

    my $json = $res->decoded_content;
    my $data = decode_json($json);

    return $data;
}

sub get_api_key {
    my $key = 0;

    open my $fh, "<", RC_FILE or print_error( "$!: " . RC_FILE . "\n" );
    chomp( $key = <$fh> );
    close $fh or print_error( "$!: " . RC_FILE . "\n" );

    return $key;
}

sub print_conditions {
    my $data = shift;

    my $info = $data->{'current_observation'};

    printf "Location:    %s\n",
      $info->{'display_location'}->{'full'};
    printf "Latitude:    %s\n",
      $info->{'display_location'}->{'latitude'};
    printf "Longitude:   %s\n",
      $info->{'display_location'}->{'longitude'};
    printf "Elevation:   %s m\n",
      $info->{'display_location'}->{'elevation'};
    printf "Condition:   %s\n",
      $info->{'weather'};
    my $string = sprintf "Temperature: %s °C\n",
      $info->{'temp_c'};
    my $bytestring = Encode::encode("utf-8", $string);
    print $bytestring;
    printf "Humidity:    %s\n",
      $info->{'relative_humidity'};
    printf "Wind:        %s km/h\n",
      $info->{'wind_kph'};
    $string = sprintf "Windchill:   %s °C\n",
      $info->{'windchill_c'};
    $bytestring = Encode::encode("utf-8", $string);
    print $bytestring;
    $string = sprintf "Feels like:  %s °C\n",
      $info->{'feelslike_c'};
    $bytestring = Encode::encode("utf-8", $string);
    print $bytestring;
    printf "Visbility:   %s km\n",
      $info->{'visibility_km'};
    printf "Pressure:    %s mb\n",
      $info->{'pressure_mb'};

    exit 0;
}

sub print_forecast {
    my ( $days, $data ) = @_;

    my $info = $data->{'forecast'}{'txt_forecast'}{'forecastday'};

    $days = ( $days * 2 ) - 1;
    foreach ( 0 .. $days ) {
        my $txt = $info->[$_];
        printf "%s: %s\n", $txt->{'title'}, $txt->{'fcttext_metric'};
    }

    exit 0;
}

sub print_locations {
    my $data = shift;

    my $info = $data->{'response'}{'results'};

    foreach (@{$info}) {
        printf "%s, %s: ZMW: %s\n",
          $_->{'city'}, $_->{'country_name'}, $_->{'zmw'};
    }

    exit 0;
}

sub print_weather {
    my $opts = shift;

    my $key = get_api_key();
    my $data = get_weather_data( $opts, $key );

    print_error( $data->{'response'}{'error'}{'description'} . "\n" )
      if ( $data->{'response'}{'error'} );

    print_locations($data)
      if ( $data->{'response'}{'results'} );

    print_conditions($data)
      if ( $data->{'response'}{'features'}{'conditions'} );

    print_forecast( $opts->{'forecast'}, $data )
      if ( $data->{'response'}{'features'}{'forecast10day'} );

    return;
}

sub print_usage {
    pod2usage( -exitval => 255, -verbose => 0 );
    return;
}

sub print_help {
    pod2usage( -exitval => 0, -verbose => 1 );
    return;
}

sub print_man {
    pod2usage( -exitval => 0, -verbose => 2 );
    return;
}

sub run {
    my $opts;
    GetOptions(
        "forecast|f=i" => \$opts->{'forecast'},
        "help|h"       => \$opts->{'help'},
        "man|m"        => \$opts->{'man'},
    ) or print_usage();

    my $count = 0;
    foreach ( values %{$opts} ) {
        $count += 1 if ($_);
    }

    print_usage() if ( ( $opts->{'help'} || $opts->{'man'} ) && $count > 1 );
    print_man()  if ( $opts->{'man'} );
    print_help() if ( $opts->{'help'} );

    $opts->{'location'} = $ARGV[0] || undef;
    print_usage() if ( !$opts->{'location'} );

    print_weather($opts);

    return;
}

exit run();

__END__

=encoding utf8

=head1 NAME

weather - Get your weather from the underground.

=head1 SYNOPSIS

weather [--forecast DAYS] LOCATION

weather --help | --man

=head1 ARGUMENTS

=over 8

=item B<LOCATION>

City name, Wunderground PWS or ZMW code.

=back

=head1 OPTIONS

=over 8

=item B<--forecast> DAYS

Forecast for the next n days (including today), max 10 days.

=back

=head1 DESCRIPTION

weather is a tool to get current conditions or forecast for a given location.

An Wunderground API key L<http://api.wunderground.com/weather/api> is needed
and must be provided in the user home, ~/.weatherrc.

=cut
