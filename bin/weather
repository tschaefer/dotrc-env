#!/usr/bin/env perl

use strict;
use warnings;

use Furl;
use Getopt::Long;
use JSON::XS;
use List::Util qw(max min);
use Pod::Usage;
use POSIX qw(strftime);
use Readonly;
use Term::ANSIColor;
use utf8;

binmode STDOUT, ":encoding(UTF-8)";

Readonly::Scalar my $API_URL =>
  'https://api.openweathermap.org/data/2.5/%s?q=%s&units=metric&APPID=%s';
Readonly::Scalar my $RC_FILE      => $ENV{'HOME'} . '/.weatherrc';
Readonly::Scalar my $MAX_FORECAST => 5;

no warnings 'uninitialized';

sub print_error {
    my $msg = shift;

    print {*STDERR} $msg;

    exit 1;
}

sub get_data {
    my $url = shift;

    my $furl = Furl->new();
    my $res  = $furl->get($url);

    print_error( $res->status_line . "\n" ) if ( !$res->is_success );

    my $json = $res->decoded_content;
    my $data = decode_json($json);

    return $data;
}

sub get_weather {
    my ( $opts, $key ) = @_;

    my $endpoint = $opts->{'forecast'} ? 'forecast' : 'weather';

    my $url  = sprintf $API_URL, $endpoint, $opts->{'location'}, $key;
    my $data = get_data($url);

    return $data;
}

sub get_api_key {
    my $key = 0;

    open my $fh, "<", $RC_FILE or print_error( "$!: " . $RC_FILE . "\n" );
    chomp( $key = <$fh> );
    close $fh or print_error( "$!: " . $RC_FILE . "\n" );

    return $key;
}

sub print_current {
    my ( $data, $opts ) = @_;

    printf "%-12s %s, %s\n", 'Location:', $data->{'name'},
      $data->{'sys'}->{'country'};

    printf "%-12s %s °\n", 'Latitude:', $data->{'coord'}->{'lat'};

    printf "%-12s %s °\n", 'Longitude', $data->{'coord'}->{'lon'};

    printf "%-12s %s\n", 'Sunrise',
      strftime( "%H:%M:%S", localtime $data->{'sys'}->{'sunrise'} );

    printf "%-12s %s\n", 'Sunset',
      strftime( "%H:%M:%S", localtime $data->{'sys'}->{'sunset'} );

    printf "%-12s %s\n", 'Condition:',
      ucfirst $data->{'weather'}->[0]->{'description'};

    printf "%-12s %s °C\n", 'Temperature:', $data->{'main'}->{'temp'};

    printf "%-12s %s %%\n", 'Humidity:', $data->{'main'}->{'humidity'};

    printf "%-12s %s km/h\n", 'Wind:', $data->{'wind'}->{'speed'};

    printf "%-12s %s km\n", 'Visibility:', $data->{'visibility'} / 1000;

    printf "%-12s %s hPa\n", 'Pressure:', $data->{'main'}->{'pressure'};

    exit 0;
}

use Data::Printer;

sub get_forecast_temperature {
    my ($dt, $data) = @_;

    my @t;
    foreach my $entry (@{ $data->{'list'} }) {
        my $cdt = int strftime( "%Y%m%d", localtime $entry->{'dt'} );
        next if ($dt != $cdt);

        push @t, $entry->{'main'}->{'temp'};
    }

    my $max = max @t;
    my $min = min @t;

    return ($max, $min);
}

sub print_forecast {
    my ( $data, $opts ) = @_;

    printf "%-12s %s, %s\n", 'Location:', $data->{'city'}->{'name'},
      $data->{'city'}->{'country'};

    printf "%-12s %s °\n", 'Latitude:', $data->{'city'}->{'coord'}->{'lat'};

    printf "%-12s %s °\n", 'Longitude', $data->{'city'}->{'coord'}->{'lon'};

    print "\n";

    my $forecast = $opts->{'forecast'} - 1;
    foreach my $entry ( @{ $data->{'list'} } ) {
        my $hour = int strftime( "%H", gmtime $entry->{'dt'} );
        next if ( $hour ne 15 );

        my $dt = int strftime( "%Y%m%d", localtime $entry->{'dt'} );
        my ($max_temp, $min_temp) = get_forecast_temperature($dt, $data);

        printf "%-16s %s\n", 'Date:',
          strftime( "%A, %F", localtime $entry->{'dt'} );

        printf "%-16s %s\n", 'Condition:',
          ucfirst $entry->{'weather'}->[0]->{'description'};

        printf "%-16s %s °C\n", 'Max Temperature:', $max_temp;

        printf "%-16s %s °C\n", 'Min Temperature:', $min_temp;

        printf "%-16s %s %%\n", 'Humidity:', $entry->{'main'}->{'humidity'};

        printf "%-16s %s km/h\n", 'Wind:', $entry->{'wind'}->{'speed'};

        printf "%-16s %s hPa\n", 'Pressure:', $entry->{'main'}->{'pressure'};

        print "\n";

        last if ( !$forecast-- );
    }

    exit 0;
}

sub print_weather {
    my $opts = shift;

    my $key  = get_api_key();
    my $data = get_weather( $opts, $key );

    eval {
        $opts->{'forecast'}
          ? print_forecast( $data, $opts )
          : print_current( $data, $opts );
    };

    return;
}

sub print_usage {
    pod2usage( -exitval => 255, -verbose => 0 );
    return;
}

sub print_help {
    pod2usage(
        -exitval  => 0,
        -verbose  => 99,
        -sections => 'SYNOPSIS|OPTIONS|PARAMETERS',
    );
    return;
}

sub print_man {
    pod2usage( -exitval => 0, -verbose => 2 );
    return;
}

sub get_location {
    my $url  = 'https://ipinfo.io/geo';
    my $data = get_data($url);

    my $location = sprintf "%s,%s", $data->{'city'}, $data->{'country'};

    return $location;
}

sub run {
    my $opts;
    GetOptions(
        "help|h"       => \$opts->{'help'},
        "man|m"        => \$opts->{'man'},
        "forecast|f=i" => \$opts->{'forecast'},
        "current|c"    => \$opts->{'current'},
    ) or print_usage();

    my $count = 0;
    foreach ( values %{$opts} ) {
        $count += 1 if ($_);
    }

    print_usage() if ( ( $opts->{'help'} || $opts->{'man'} ) && $count > 1 );
    print_man()   if ( $opts->{'man'} );
    print_help()  if ( $opts->{'help'} );

    print_usage() if ( $opts->{'forecast'} && $opts->{'current'} );
    print_usage()
      if ( $opts->{'forecast'}
        && ( $opts->{'forecast'} < 1 || $opts->{'forecast'} > $MAX_FORECAST ) );

    $opts->{'location'} = $ARGV[0] || get_location();

    print_weather($opts);

    return 0;
}

exit run();

__END__

=encoding utf8

=head1 NAME

weather - Show your weather.

=head1 SYNOPSIS

weather [--current] [LOCATION]

weather --forecast 1-5 [LOCATION]

weather --help | --man

=head1 OPTIONS

=over 8

=item current|c

Get current weather data.

=item forecast|f 1-5

Get weather forecast up to five days starting with today.

=back

=head1 PARAMETERS

=over 8

=item B<LOCATION>

City name (comma separated country) [default current location].

=back

=head1 DESCRIPTION

weather is a tool to get current or forecast conditions for a given location.

An OpenWeatherMap API key L<http://openweathermap.org> is needed
and must be provided in the user home, ~/.weatherrc.

=cut
