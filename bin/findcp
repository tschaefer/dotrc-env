#!/usr/bin/env perl

use strict;
use warnings;

use Modern::Perl '2019';
use English qw(-no_match_vars);

use Getopt::Long qw(:config require_order);
use Pod::Usage;

use Cwd qw(realpath);
use File::Basename qw(dirname);
use File::Spec;
use File::Find qw(find);

use IPC::Run;
use Text::ParseWords;

my %opts = (
    'basedir'   => '.',
    'help'      => 0,
    'man'       => 0,
    'no-create' => 0,
    'path'      => undef,
    'recursive' => 0,
    'regex'     => undef,
    'verbose'   => 0,
);
my @files;

sub print_usage {
    pod2usage( -exitval => 255, -verbose => 0 );
    return;
}

sub print_help {
    pod2usage(
        -exitval  => 0,
        -verbose  => 99,
        -sections => 'SYNOPSIS|OPTIONS|PARAMETERS',
    );
    return;
}

sub print_man {
    pod2usage( -exitval => 0, -verbose => 2 );
    return;
}

sub search {
    my $regex = $opts{'regex'};
    find( sub { push @files, $File::Find::name if (m/$regex/) },
        $opts{'path'} );

    return;
}

sub makepath {
    return if ( $opts{'no-create'} );

    foreach my $file (@files) {
        my $srcdir    = dirname $file;
        my $targetdir = File::Spec->catdir( $opts{'basedir'}, $srcdir );

        my @cmd = ( 'mkdir', '-p', $targetdir );
        IPC::Run::run( \@cmd, '>/dev/null', '2>/dev/null' );
    }

    return;
}

sub copyfile {
    foreach my $file (@files) {
        my $targetdir;

        if ( !$opts{'no-create'} ) {
            my $srcdir = dirname $file;
            $targetdir = File::Spec->catdir( $opts{'basedir'}, $srcdir );
        }
        else {
            $targetdir = $opts{'basedir'};
        }

        my $cmd = sprintf "cp %s %s %s %s",
          $opts{'verbose'}   ? '-v' : '',
          $opts{'recursive'} ? '-r' : '',
          $file, $targetdir;
        my @exec = shellwords($cmd);

        my ( $out, $err );
        IPC::Run::run( \@exec, '>', \$out, '2>', \$err );
        printf {*STDERR} "%s", $err if ($CHILD_ERROR);
        print $out if ( $opts{'verbose'} );
    }

    return;

}

sub run {
    GetOptions(
        "basedir|b=s" => \$opts{'basedir'},
        "help|h"      => \$opts{'help'},
        "man|m"       => \$opts{'man'},
        "no-create|c" => \$opts{'no-create'},
        "recursive|r" => \$opts{'recursive'},
        "verbose|v"   => \$opts{'verbose'},
    ) or return print_usage();

    return print_help() if ( $opts{'help'} );
    return print_man()  if ( $opts{'man'} );

    return print_usage() if ( scalar @ARGV != 2 );

    $opts{'path'}  = realpath( $ARGV[0] );
    $opts{'regex'} = $ARGV[1];

    search();
    makepath();
    copyfile();

    return 0;
}

exit run();

__END__

=encoding utf8

=head1 NAME

findcp - Find an copy files.

=head1 SYNOPSIS

findcp [--basedir DIR --no-create --recursive --verbose] PATH REGEX

findcp --help | --man

=head1 OPTIONS

=over 8

=item B<--basedir|-b> PATH

Base directory to cop files, default current working directory.

=item B<--no-create|c>

Do not create subdirectories.

=item B<--recursive|-r>

Copy files recursive.

=item B<--verbose|-v>

Explain what is being done.

=back

=head1 PARAMETERS

=over 8

=item B<PATH>

Starting path for search.

=item B<REGEX>

Regular expression to search for.

=back

=head1 DESCRIPTION

findcp is a tool for finding and copying files.

All necessary subdirectories are created in the given basedirectory.

=cut
